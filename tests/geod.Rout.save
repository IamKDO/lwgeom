
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### Name: lw_geodetic
> ### Title: geodetic length, area, and predicates
> ### Aliases: lw_geodetic st_geod_area lw_geodetic st_geod_length
> ###   lw_geodetic st_geod_segmentize lw_geodetic st_geod_covers
> 
> ### ** Examples
> 
> library(lwgeom)
Linking to lwgeom 2.3.1 r15264
> library(sf)
Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
> nc = st_read(system.file("gpkg/nc.gpkg", package="sf"))
Reading layer `nc.gpkg' from data source `/home/edzer/R/x86_64-pc-linux-gnu-library/3.4/sf/gpkg/nc.gpkg' using driver `GPKG'
Simple feature collection with 100 features and 14 fields
geometry type:  MULTIPOLYGON
dimension:      XY
bbox:           xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965
epsg (SRID):    4267
proj4string:    +proj=longlat +datum=NAD27 +no_defs
> st_geod_area(nc[1:3,])
Units: m^2
[1] 1137388604  611077263 1423489919
> # st_area(nc[1:3,])
> l = st_sfc(st_linestring(rbind(c(7,52), c(8,53))), crs = 4326)
> st_geod_length(l)
130359.3 m
> library(units)
> pol = st_polygon(list(rbind(c(0,0), c(0,60), c(60,60), c(0,0))))
> x = st_sfc(pol, crs = 4326)
> seg = st_geod_segmentize(x[1], set_units(10, km))
> plot(seg, graticule = TRUE, axes = TRUE)
> pole = st_polygon(list(rbind(c(0,80), c(120,80), c(240,80), c(0,80))))
> pt = st_point(c(0,90))
> x = st_sfc(pole, pt, crs = 4326)
> st_geod_covers(x[c(1,1,1)], x[c(2,2,2,2)])
Sparse geometry binary predicate list of length 3, where the predicate was `covers'
 1: 1, 2, 3, 4
 2: 1, 2, 3, 4
 3: 1, 2, 3, 4
> 
> proc.time()
   user  system elapsed 
  0.584   0.312   0.575 
